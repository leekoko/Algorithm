import java.util.Scanner;

/*10.四平方和
四平方和定理，又称为拉格朗日定理：
每个正整数都可以表示为至多4个正整数的平方和。
如果把0包括进去，就正好可以表示为4个数的平方和。
比如：
5 = 0^2 + 0^2 + 1^2 + 2^2
7 = 1^2 + 1^2 + 1^2 + 2^2
（^符号表示乘方的意思）
对于一个给定的正整数，可能存在多种平方和的表示法。
要求你对4个数排序：
0 <= a <= b <= c <= d
并对所有的可能表示法按 a,b,c,d 为联合主键升序排列，最后输出第一个表示法
程序输入为一个正整数N (N<5000000)
要求输出4个非负整数，按从小到大排序，中间用空格分开

例如，输入：
5
则程序应该输出：
0 0 1 2

再例如，输入：
12
则程序应该输出：
0 2 2 2

再例如，输入：
773535
则程序应该输出：
1 1 267 838

资源约定：
峰值内存消耗（含虚拟机） < 256M
CPU消耗  < 3000ms*/

public class Main {
/*	题目分析：
	1.这里使用暴力破解法，设置一个for循环，循环到5000000的开方（可知最小范围）
	2.解决从小到大列出：每层循环都从上一个数开始
	3.降低时间复杂度：循环出其他三个数之后，因为已知答案，第四个数可以用开方来获取
	4.解决要求的是最大的数的问题，因为是从第一个数开始循环的，所以第一个数就是最大的数，直接输出即可。*/

public static void main(String[] args) {
	Scanner input=new Scanner(System.in);
	int num=input.nextInt();
	double maxNum= Math.sqrt(5000000);
	for (int i = 0; i <maxNum; i++) {
		for (int j = i; j < maxNum; j++) {
			for (int k = j; k < maxNum; k++) {
				int l=(int)Math.sqrt(num-i*i-j*j-k*k);
				if(i*i+j*j+k*k+l*l==num){
					System.out.println(i+" "+j+" "+k+" "+l);
					return;
				} 
			}
		}
	}
	
	
	
	
}
}
